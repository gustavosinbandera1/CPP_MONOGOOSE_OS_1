author: Gustavo Grisales
description: A Mongoose OS app skeleton
version: 1.0

libs_version: ${mos.version}
modules_version: ${mos.version}
mongoose_os_version: ${mos.version}

# Optional. List of tags for online search.
tags:
  - c
includes:
  - include

# List of files / directories with C sources. No slashes at the end of dir names.
sources:
  - src

# List of dirs. Files from these dirs will be copied to the device filesystem
filesystem:
  - fs

# Custom configuration entries, settable via "device configuration"
# Below is a custom firmware configuration example.
# Uncomment and modify according to your needs:

config_schema:
    - ["wifi.ap.enable", "b", false, {title: "Enable"}]
    # - ["wifi.ap.ssid", "s", "Gustavo_??????", {title: "SSID"}]
    # - ["wifi.ap.pass", "s", "Mongoose", {title: "Password", type: "password"}]

    # - ["wifi.ap.hidden", "b", false, {title: "Hide SSID"}]
    # - ["wifi.ap.channel", "i", 6, {title: "Channel"}]
    # - ["wifi.ap.max_connections", "i", 10, {title: "Max connections"}]
    # - ["wifi.ap.ip", "s", "192.168.4.1", {title: "IP address"}]
    # - ["wifi.ap.netmask", "s", "255.255.255.0", {title: "Network Mask"}]
    # - ["wifi.ap.gw", "s", "192.168.4.1", {title: "Default Gateway"}]
    # - ["wifi.ap.dhcp_start", "s", "192.168.4.2", {title: "DHCP Start Address"}]
    # - ["wifi.ap.dhcp_end", "s", "192.168.4.100", {title: "DHCP End Address"}]

    #- ["wifi.sta", "o", {title: "WiFi STA Config"}]
    - ["wifi.sta.enable", true]
    - ["wifi.sta.ssid", "Redmi Note 10S"]
    - ["wifi.sta.pass", "COPITOCHIP12345678"]
    - ["wifi.sta_connect_timeout", 30]

    - ["device.id", "test-ABCD"]


    # - ["mqtt.enable", true]
    # - ["mqtt.recv_mbuf_limit", 20480]
    

    
    #- ["device.id", "suvie-m-????????????"]

    # - ["app.pin", "i", 5, {title: "GPIO pin a sensor is attached to"}]

    

    #- ["i2c.enable", true]
#  - ["my_app", "o", {title: "My app custom settings"}]
#  - ["my_app.bool_value", "b", false, {title: "Some boolean value"}]
#  - ["my_app.string_value", "s", "", {title: "Some string value"}]
#  - ["my_app.int_value", "i", 123, {title: "Some integer value"}]

# These settings get compiled into the C structure, and can be accessed
# from the C code this way:
#printf("Hello from %s!\n", mgos_sys_config_get_device_id());
#
# Settings are cool: can be modified remotely without full firmware upgrade!
#
# To see all available compiled settings, buid the firmware and open
# build/gen/mgos_config.h file.
#
# Also, in this config_schema section, you can override existing
# settings that has been created by other libraries. For example, debug log
# level is 2 by default. For this firmware we can override it to 3:
#
# config_schema:
#  - ["debug.level", 3]


libs:
  #- origin: https://github.com/mongoose-os-libs/boards
  #- origin: https://github.com/mongoose-os-libs/ca-bundle
  

  
  - origin: https://github.com/mongoose-os-libs/wifi
  - origin: https://github.com/mongoose-os-libs/adc
  #- origin: https://github.com/mongoose-os-libs/http-server
  #- origin: https://github.com/mongoose-os-libs/i2c
  

  - origin: https://github.com/mongoose-os-libs/rpc-common
  - origin: https://github.com/mongoose-os-libs/rpc-service-fs
  - origin: https://github.com/mongoose-os-libs/rpc-service-config
  - origin: https://github.com/mongoose-os-libs/rpc-uart
  - origin: https://github.com/mongoose-os-libs/rpc-service-gpio
  - origin: https://github.com/mongoose-os-libs/rpc-service-i2c
  - origin: https://github.com/mongoose-os-libs/rpc-ws
  - origin: https://github.com/mongoose-os-libs/rpc-service-ota
  - origin: https://github.com/mongoose-os-libs/rpc-mqtt
  - origin: https://github.com/mongoose-os-libs/rpc-loopback
  #- origin: https://github.com/mongoose-os-libs/freertos

  - origin: https://github.com/mongoose-os-libs/mqtt # <-- Add this!
  - origin: https://github.com/mongoose-os-libs/aws

# Used by the mos tool to catch mos binaries incompatible with this file format
manifest_version: 2017-09-29
